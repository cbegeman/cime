#!/usr/bin/env python3

from standard_script_setup import *
from CIME.utils import expect, run_bld_cmd_ensure_logging, run_cmd_no_fail, run_cmd
from CIME.case import Case
from CIME.build import get_standard_makefile_args

logger = logging.getLogger(__name__)


def parse_command_line(args, description):
    ###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""".format(
            os.path.basename(args[0])
        ),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot", help="build path root")

    parser.add_argument("installpath", help="install path ")

    parser.add_argument(
        "caseroot", nargs="?", default=os.getcwd(), help="Case directory to build"
    )

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot


###############################################################################
def buildlib(bldroot, installpath, case):
    ###############################################################################
    logger.info("Beginning smartredis build")
    srcroot = case.get_value("SRCROOT")
    smartredis_dir = os.path.join(srcroot, "externals", "smartredis")
    expect(os.path.isdir(smartredis_dir), "Missing smartredis submodule")

    if os.path.exists(os.path.join(smartredis_dir, "install/lib/libsmartredis.so")):
       logger.info("Using existing smartredis build")
    else:
       logger.info("No smartredis build found at {}".format(smartredis_dir+"install/lib/"))
       # We want to get the compiler and kokkos_options from Macros.make
       # (generated from config_compilers.xml), but we want to otherwise
       # let smartsim control flags
       make_args = get_standard_makefile_args(case, shared_lib=True)
       stat, output, _ = run_cmd(
           "make -f Macros.make {} -p | grep SMARTREDIS_OPTIONS".format(make_args)
       )
       if stat == 0:
           smartredis_options = output.split(":=")[-1].strip()
       else:
           # This is the default setup.
           smartredis_options = ""
           logger.warning(
               "Failed to find custom smartredis options, using default: {:s}.".format(
                   smartredis_options
               )
           )

       #cxx = (
       #    run_cmd_no_fail("make -f Macros.make {} -p | grep SCXX".format(make_args))
       #    .split(":=")[-1]
       #    .strip()
       #)

       # TODO Note: the following lines work on the command line but not in the script
       stat, output, _ = run_cmd("conda activate SmartE3SM")
       logger.info("{}".format(output))
       stat, output, _ = run_cmd("module swap intel gcc")
       logger.info("{}".format(output))

       run_bld_cmd_ensure_logging("make lib {}".format(smartredis_options), logger, from_dir=smartredis_dir)
       stat, output, _ = run_cmd("module swap gcc intel")
       stat, output, _ = run_cmd("conda deactivate SmartE3SM")


def _main(argv, documentation):
    bldroot, installpath, caseroot = parse_command_line(argv, documentation)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, installpath, case)


if __name__ == "__main__":
    _main(sys.argv, __doc__)
